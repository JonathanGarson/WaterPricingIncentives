output = "html"
modelsummary(
models = list(
"Overall" = list("Interacted" = reg_waterlevel_within),
"0–70 days after planting" = list("Interacted" = reg_waterlevel_inf70_wth),
"70+ days after planting" = list("Interacted" = reg_waterlevel_sup70_wth)
),
shape = "cbind",
gof_omit = "R2|Adj\\.|Within|AIC|BIC|RMSE|Std.Errors|FE",
coef_rename = c("Treatment", "Volumetric Pricing","Treatment x Volumetric Pricing"),  # Disable automatic GOF statistics
add_rows = add_to_table_C,
output = "html"
)
p_value = data.frame(
term = "p-value (car)",
Overall_Interacted = p_test_overall_C,
Inf70_Interacted = p_test_inf70_C,
Sup70_Interacted = p_test_sup70_C
)
p_value_fit = data.frame(
term = "p-value (fixest)",
Overall_Interacted = p_test_overall_C_fit,
Inf70_Interacted = p_test_inf70_C_fit,
Sup70_Interacted = p_test_sup70_C_fit
)
add_to_table_C = rbind(p_value, p_value_fit)
table2C = modelsummary(
models = list(
"Overall" = list("Interacted" = reg_waterlevel_within),
"0–70 days after planting" = list("Interacted" = reg_waterlevel_inf70_wth),
"70+ days after planting" = list("Interacted" = reg_waterlevel_sup70_wth)
),
shape = "cbind",
gof_omit = "R2|Adj\\.|Within|AIC|BIC|RMSE|Std.Errors|FE",
coef_rename = c("Treatment", "Volumetric Pricing","Treatment x Volumetric Pricing"),  # Disable automatic GOF statistics
add_rows = add_to_table_C,
output = "html"
)
modelsummary(
models = list(
"Overall" = list("Interacted" = reg_waterlevel_within),
"0–70 days after planting" = list("Interacted" = reg_waterlevel_inf70_wth),
"70+ days after planting" = list("Interacted" = reg_waterlevel_sup70_wth)
),
shape = "cbind",
gof_omit = "R2|Adj\\.|Within|AIC|BIC|RMSE|Std.Errors|FE",
coef_rename = c("Treatment", "Volumetric Pricing","Treatment x Volumetric Pricing"),  # Disable automatic GOF statistics
add_rows = add_to_table_C,
output = "html"
)
table_2C_char = as.character(table2C)
writeLines(table_2C_char, output_folder("tables2_C.tex"))
table2C = modelsummary(
models = list(
"Overall" = list("Interacted" = reg_waterlevel_within),
"0–70 days after planting" = list("Interacted" = reg_waterlevel_inf70_wth),
"70+ days after planting" = list("Interacted" = reg_waterlevel_sup70_wth)
),
shape = "cbind",
gof_omit = "R2|Adj\\.|Within|AIC|BIC|RMSE|Std.Errors|FE",
coef_rename = c("Treatment", "Volumetric Pricing","Treatment x Volumetric Pricing"),  # Disable automatic GOF statistics
add_rows = add_to_table_C,
output = "latex"
)
table_2C_char = as.character(table2C)
writeLines(table_2C_char, output_folder("tables2_C.tex"))
# This files replicate the findings of Ujjayant Chakravorty, Kyle Emerick, and Manzoor Dar
# For the paper "Inefficient water pricing and incentives for conservation" published in the American Economic Review in 2023
# Table 2
# Packages ----------------------------------------------------------------
library(fixest)
library(data.table)
library(dplyr)
library(modelsummary)
library(dplyr)
library(car)
# Data --------------------------------------------------------------------
rct1 = fread(get_data("input_primary/rct1_watermeasure.csv"))
rct1_baseline = fread(get_data("input_primary/rct1_baseline.csv"))
# Function ----------------------------------------------------------------
p_value_joint_test = function(dataset, test_var){
hyp_test = linearHypothesis(dataset, test_var, test = "F")
p_value = hyp_test$`Pr(>F)`[2]
return(p_value)
}
# Panel A - Main Results --------------------------------------------------
rct1 = rct1[!is.na(waterunit),] #we get rid of na
# Average treatment effects
reg_waterlevel = feols(waterlevel ~ treatment |Upazila, cluster = ~village_id ,data = rct1)
# heterogeneity by volumetric pricing
reg_het_water_vp = feols(waterlevel ~ treatment*anymarginal | Upazila, cluster = ~village_id, data = rct1)
p_value_overall = p_value_joint_test(reg_het_water_vp, "treatment + treatment:anymarginal = 0")
# p_value_overall = fitstat(reg_het_water_vp, ~ f + wald)$wald$p
# Control mean
control_mean_overall = round(rct1[treatment == 0, .(mean = mean(waterlevel))], 2)$mean
## 70 ----------------------------------------------------------------------
reg_inf70_waterlevel = feols(waterlevel ~ treatment*anymarginal | Upazila, cluster = ~village_id, data = rct1[dat <= 70])
reg_sup70_waterlevel = feols(waterlevel ~ treatment*anymarginal | Upazila, cluster = ~village_id, data = rct1[dat > 70])
reg_inf70_waterlevel_baseline = feols(waterlevel ~ treatment | Upazila, cluster = ~village_id, data = rct1[dat <= 70])
reg_sup70_waterlevel_baseline = feols(waterlevel ~ treatment | Upazila, cluster = ~village_id, data = rct1[dat > 70])
control_mean_inf70 = round(rct1[treatment == 0 & dat < 70, .(mean = mean(waterlevel))], 2)$mean
control_mean_sup70 = round(rct1[treatment == 0 & dat > 70, .(mean = mean(waterlevel))], 2)$mean
# p_value_inf70 = fitstat(reg_inf70_waterlevel, ~ f + wald)
# p_value_sup70 = fitstat(reg_sup70_waterlevel, ~ f + wald)
p_value_inf70 = p_value_joint_test(reg_inf70_waterlevel, "treatment + treatment:anymarginal = 0")
p_value_sup70 = p_value_joint_test(reg_sup70_waterlevel, "treatment + treatment:anymarginal = 0")
## Tables Panel A ----------------------------------------------------------
control_mean_df <- data.frame(
term = "Control Mean",  # The row label
Overall_Baseline = control_mean_overall,
Overall_Interacted = control_mean_overall,
Inf70_Baseline = control_mean_inf70,
Inf70_Interacted = control_mean_inf70,
Sup70_Baseline = control_mean_sup70,
Sup70_Interacted = control_mean_sup70
)
p_value_df = data.frame(
term = "p-value",
Overall_Baseline = NA,
Overall_Interacted = p_value_overall,
Inf70_Baseline = NA,
Inf70_Interacted = p_value_inf70,
Sup70_Baseline = NA,
Sup70_Interacted = p_value_sup70
)
add_to_table = rbind(control_mean_df, p_value_df)
# Generate the LaTeX table
table2A = modelsummary(
models = list(
"Overall" = list("(1)" = reg_waterlevel, "(2)" = reg_het_water_vp),
"0–70 days after planting" = list("(3)" = reg_inf70_waterlevel_baseline, "(4)" = reg_inf70_waterlevel),
"70+ days after planting" = list("(5)" = reg_sup70_waterlevel_baseline, "(6)" = reg_sup70_waterlevel)
),
shape = "cbind",
gof_omit = "R2|Adj\\.|Within|AIC|BIC|RMSE|Std.Errors|FE",
coef_rename = c("Treatment", "Volumetric Pricing", "Treatment x Volumetric Pricing"),
add_rows = add_to_table,
modelsummary_format_numeric_latex = "plain",
output = "latex"
)
table_2A_char = as.character(table2A)
writeLines(table_2A_char, output_folder("tables2_A.tex"))
# Panel B - Only in between Upazila variation in volumetric pricing -----------------
rct1_baseline[, upamean_marg := mean(anymarginal), by = upazila]
rct1_baseline[, t_upamean_marg := treatment*upamean_marg, by = upazila]
upamean_db = rct1_baseline[, .(farmer_id, upamean_marg, t_upamean_marg)]
rct1 = merge(rct1, upamean_db, by = "farmer_id")
## Overall -----------------------------------------------------------------
reg_waterlevel_overall_bw = feols(waterlevel ~ treatment + t_upamean_marg, fixef = c("Upazila"), cluster = ~village_id, data = rct1)
p_test_overall_B = p_value_joint_test(reg_waterlevel_overall_bw, "treatment + t_upamean_marg = 0")
# p_test_overall_B = fitstat(reg_waterlevel_overall_bw, ~wald)$wald$p
## <70 days ---------------------------------------------------------------
reg_waterlevel_inf70_bw = feols(waterlevel ~ treatment + t_upamean_marg, fixef = c("Upazila"), cluster = ~village_id, data = rct1[dat <= 70])
p_test_overall_B_inf70 = p_value_joint_test(reg_waterlevel_inf70_bw, "treatment + t_upamean_marg = 0")
# p_test_overall_B_inf70 = fitstat(reg_waterlevel_inf70_bw, ~wald)$wald$p
## >70 days ---------------------------------------------------------------
reg_waterlevel_sup70_bw = feols(waterlevel ~ treatment + t_upamean_marg, fixef = c("Upazila"), cluster = ~village_id, data = rct1[dat > 70])
p_test_overall_B_sup70 = p_value_joint_test(reg_waterlevel_sup70_bw, "treatment + t_upamean_marg = 0")
# p_test_overall_B_sup70 = fitstat(reg_waterlevel_sup70_bw, ~wald)$wald$p
## Tables Panel B ----------------------------------------------------------
add_to_table_B = data.frame(
term = "p-value",
Overall_Interacted = p_test_overall_B,
Inf70_Interacted = p_test_overall_B_inf70,
Sup70_Interacted = p_test_overall_B_sup70
)
table2B = modelsummary(
models = list(
"Overall" = list("(1)" = reg_waterlevel_overall_bw),
"0–70 days after planting" = list("(2)" =reg_waterlevel_inf70_bw),
"70+ days after planting" = list("(3)" = reg_waterlevel_sup70_bw)
),
shape = "cbind",
gof_omit = "R2|Adj\\.|Within|AIC|BIC|RMSE|Std.Errors|FE",
coef_rename = c("Treatment","Treatment x Volumetric Pricing Upazila Mean"),  # Disable automatic GOF statistics
add_rows = add_to_table_B,
output = "latex"
)
table_2B_char = as.character(table2B)
writeLines(table_2B_char, output_folder("tables2_B.tex"))
# Panel C - Within Upazila variation --------------------------------------
## Overall -----------------------------------------------------------------
rct1[, treatment_within := treatment - mean(treatment, na.rm = TRUE), by = Upazila]
rct1[, t_marg := anymarginal*treatment]
# With interacted fixed effects for place and treatment
# reg_waterlevel_within_interact = feols(waterlevel ~ treatment + anymarginal + t_marg | Upazila^treatment, cluster = ~village_id, data = rct1)
# With interacted fixed effects alternative
# reg_waterlevel_within_interact = feols(waterlevel ~ treatment + anymarginal + t_marg + i(Upazila, treatment, ref = "BAGMARA"), cluster = ~village_id, data = rct1)
# p_test_overall_C = p_value_joint_test(reg_waterlevel_within_interact , "treatment + anymarginal + t_marg = 0")
# With demean treatment by upazila to avoid colinearity issues.
reg_waterlevel_within = feols(waterlevel ~ treatment_within*anymarginal | Upazila, cluster = ~village_id, data = rct1)
p_test_overall_C = p_value_joint_test(reg_waterlevel_within , "treatment_within + anymarginal +treatment_within:anymarginal = 0")
p_test_overall_C_fit = fitstat(reg_waterlevel_within, ~ f + wald)$wald$p
## <70 days ---------------------------------------------------------------
reg_waterlevel_inf70_wth = feols(waterlevel ~ treatment_within*anymarginal, fixef = c("Upazila"), cluster = ~village_id, data = rct1[dat <= 70])
p_test_inf70_C = p_value_joint_test(reg_waterlevel_inf70_wth, "treatment_within + anymarginal + treatment_within:anymarginal = 0")
p_test_inf70_C_fit = fitstat(reg_waterlevel_inf70_wth, ~ wald)$wald$p
## >70 days ---------------------------------------------------------------
reg_waterlevel_sup70_wth = feols(waterlevel ~ treatment_within*anymarginal, fixef = c("Upazila"), cluster = ~village_id, data = rct1[dat > 70])
p_test_sup70_C = p_value_joint_test(reg_waterlevel_sup70_wth, "treatment_within + anymarginal + treatment_within:anymarginal= 0")
p_test_sup70_C_fit = fitstat(reg_waterlevel_sup70_wth, ~ wald)$wald$p
## Tables Panel C ----------------------------------------------------------
p_value = data.frame(
term = "p-value (car)",
Overall_Interacted = p_test_overall_C,
Inf70_Interacted = p_test_inf70_C,
Sup70_Interacted = p_test_sup70_C
)
p_value_fit = data.frame(
term = "p-value (fixest)",
Overall_Interacted = p_test_overall_C_fit,
Inf70_Interacted = p_test_inf70_C_fit,
Sup70_Interacted = p_test_sup70_C_fit
)
add_to_table_C = rbind(p_value, p_value_fit)
table2C = modelsummary(
models = list(
"Overall" = list("(1)" = reg_waterlevel_within),
"0–70 days after planting" = list("(2)" = reg_waterlevel_inf70_wth),
"70+ days after planting" = list("(3)" = reg_waterlevel_sup70_wth)
),
shape = "cbind",
gof_omit = "R2|Adj\\.|Within|AIC|BIC|RMSE|Std.Errors|FE",
coef_rename = c("Treatment", "Volumetric Pricing","Treatment x Volumetric Pricing"),  # Disable automatic GOF statistics
add_rows = add_to_table_C,
output = "latex"
)
table_2C_char = as.character(table2C)
writeLines(table_2C_char, output_folder("tables2_C.tex"))
# This files replicate the findings of Ujjayant Chakravorty, Kyle Emerick, and Manzoor Dar
# For the paper "Inefficient water pricing and incentives for conservation" published in the American Economic Review in 2023
# Table 2
# Packages ----------------------------------------------------------------
library(fixest)
library(data.table)
library(dplyr)
library(modelsummary)
library(dplyr)
library(car)
# Data --------------------------------------------------------------------
rct1 = fread(get_data("input_primary/rct1_watermeasure.csv"))
rct1_baseline = fread(get_data("input_primary/rct1_baseline.csv"))
# Function ----------------------------------------------------------------
p_value_joint_test = function(dataset, test_var){
hyp_test = linearHypothesis(dataset, test_var, test = "F")
p_value = hyp_test$`Pr(>F)`[2]
return(p_value)
}
# Panel A - Main Results --------------------------------------------------
rct1 = rct1[!is.na(waterunit),] #we get rid of na
# Average treatment effects
reg_waterlevel = feols(waterlevel ~ treatment |Upazila, cluster = ~village_id ,data = rct1)
# heterogeneity by volumetric pricing
reg_het_water_vp = feols(waterlevel ~ treatment*anymarginal | Upazila, cluster = ~village_id, data = rct1)
p_value_overall = p_value_joint_test(reg_het_water_vp, "treatment + treatment:anymarginal = 0")
# p_value_overall = fitstat(reg_het_water_vp, ~ f + wald)$wald$p
# Control mean
control_mean_overall = round(rct1[treatment == 0, .(mean = mean(waterlevel))], 2)$mean
## 70 ----------------------------------------------------------------------
reg_inf70_waterlevel = feols(waterlevel ~ treatment*anymarginal | Upazila, cluster = ~village_id, data = rct1[dat <= 70])
reg_sup70_waterlevel = feols(waterlevel ~ treatment*anymarginal | Upazila, cluster = ~village_id, data = rct1[dat > 70])
reg_inf70_waterlevel_baseline = feols(waterlevel ~ treatment | Upazila, cluster = ~village_id, data = rct1[dat <= 70])
reg_sup70_waterlevel_baseline = feols(waterlevel ~ treatment | Upazila, cluster = ~village_id, data = rct1[dat > 70])
control_mean_inf70 = round(rct1[treatment == 0 & dat < 70, .(mean = mean(waterlevel))], 2)$mean
control_mean_sup70 = round(rct1[treatment == 0 & dat > 70, .(mean = mean(waterlevel))], 2)$mean
# p_value_inf70 = fitstat(reg_inf70_waterlevel, ~ f + wald)
# p_value_sup70 = fitstat(reg_sup70_waterlevel, ~ f + wald)
p_value_inf70 = p_value_joint_test(reg_inf70_waterlevel, "treatment + treatment:anymarginal = 0")
p_value_sup70 = p_value_joint_test(reg_sup70_waterlevel, "treatment + treatment:anymarginal = 0")
## Tables Panel A ----------------------------------------------------------
control_mean_df <- data.frame(
term = "Control Mean",  # The row label
Overall_Baseline = control_mean_overall,
Overall_Interacted = control_mean_overall,
Inf70_Baseline = control_mean_inf70,
Inf70_Interacted = control_mean_inf70,
Sup70_Baseline = control_mean_sup70,
Sup70_Interacted = control_mean_sup70
)
p_value_df = data.frame(
term = "p-value",
Overall_Baseline = NA,
Overall_Interacted = p_value_overall,
Inf70_Baseline = NA,
Inf70_Interacted = p_value_inf70,
Sup70_Baseline = NA,
Sup70_Interacted = p_value_sup70
)
add_to_table = rbind(control_mean_df, p_value_df)
# Generate the LaTeX table
table2A = modelsummary(
models = list(
"Overall" = list("(1)" = reg_waterlevel, "(2)" = reg_het_water_vp),
"0–70 days after \nplanting" = list("(3)" = reg_inf70_waterlevel_baseline, "(4)" = reg_inf70_waterlevel),
"70+ days after \nplanting" = list("(5)" = reg_sup70_waterlevel_baseline, "(6)" = reg_sup70_waterlevel)
),
shape = "cbind",
gof_omit = "R2|Adj\\.|Within|AIC|BIC|RMSE|Std.Errors|FE",
coef_rename = c("Treatment", "Volumetric Pricing", "Treatment x Volumetric Pricing"),
add_rows = add_to_table,
modelsummary_format_numeric_latex = "plain",
output = "latex"
)
table_2A_char = as.character(table2A)
writeLines(table_2A_char, output_folder("tables2_A.tex"))
# Panel B - Only in between Upazila variation in volumetric pricing -----------------
rct1_baseline[, upamean_marg := mean(anymarginal), by = upazila]
rct1_baseline[, t_upamean_marg := treatment*upamean_marg, by = upazila]
upamean_db = rct1_baseline[, .(farmer_id, upamean_marg, t_upamean_marg)]
rct1 = merge(rct1, upamean_db, by = "farmer_id")
## Overall -----------------------------------------------------------------
reg_waterlevel_overall_bw = feols(waterlevel ~ treatment + t_upamean_marg, fixef = c("Upazila"), cluster = ~village_id, data = rct1)
p_test_overall_B = p_value_joint_test(reg_waterlevel_overall_bw, "treatment + t_upamean_marg = 0")
# p_test_overall_B = fitstat(reg_waterlevel_overall_bw, ~wald)$wald$p
## <70 days ---------------------------------------------------------------
reg_waterlevel_inf70_bw = feols(waterlevel ~ treatment + t_upamean_marg, fixef = c("Upazila"), cluster = ~village_id, data = rct1[dat <= 70])
p_test_overall_B_inf70 = p_value_joint_test(reg_waterlevel_inf70_bw, "treatment + t_upamean_marg = 0")
# p_test_overall_B_inf70 = fitstat(reg_waterlevel_inf70_bw, ~wald)$wald$p
## >70 days ---------------------------------------------------------------
reg_waterlevel_sup70_bw = feols(waterlevel ~ treatment + t_upamean_marg, fixef = c("Upazila"), cluster = ~village_id, data = rct1[dat > 70])
p_test_overall_B_sup70 = p_value_joint_test(reg_waterlevel_sup70_bw, "treatment + t_upamean_marg = 0")
# p_test_overall_B_sup70 = fitstat(reg_waterlevel_sup70_bw, ~wald)$wald$p
## Tables Panel B ----------------------------------------------------------
add_to_table_B = data.frame(
term = "p-value",
Overall_Interacted = p_test_overall_B,
Inf70_Interacted = p_test_overall_B_inf70,
Sup70_Interacted = p_test_overall_B_sup70
)
table2B = modelsummary(
models = list(
"Overall" = list("(1)" = reg_waterlevel_overall_bw),
"0–70 days after \nplanting" = list("(2)" =reg_waterlevel_inf70_bw),
"70+ days after \nplanting" = list("(3)" = reg_waterlevel_sup70_bw)
),
shape = "cbind",
gof_omit = "R2|Adj\\.|Within|AIC|BIC|RMSE|Std.Errors|FE",
coef_rename = c("Treatment","Treatment x Volumetric Pricing Upazila Mean"),  # Disable automatic GOF statistics
add_rows = add_to_table_B,
output = "latex"
)
table_2B_char = as.character(table2B)
writeLines(table_2B_char, output_folder("tables2_B.tex"))
# Panel C - Within Upazila variation --------------------------------------
## Overall -----------------------------------------------------------------
rct1[, treatment_within := treatment - mean(treatment, na.rm = TRUE), by = Upazila]
rct1[, t_marg := anymarginal*treatment]
# With interacted fixed effects for place and treatment
# reg_waterlevel_within_interact = feols(waterlevel ~ treatment + anymarginal + t_marg | Upazila^treatment, cluster = ~village_id, data = rct1)
# With interacted fixed effects alternative
# reg_waterlevel_within_interact = feols(waterlevel ~ treatment + anymarginal + t_marg + i(Upazila, treatment, ref = "BAGMARA"), cluster = ~village_id, data = rct1)
# p_test_overall_C = p_value_joint_test(reg_waterlevel_within_interact , "treatment + anymarginal + t_marg = 0")
# With demean treatment by upazila to avoid colinearity issues.
reg_waterlevel_within = feols(waterlevel ~ treatment_within*anymarginal | Upazila, cluster = ~village_id, data = rct1)
p_test_overall_C = p_value_joint_test(reg_waterlevel_within , "treatment_within + anymarginal +treatment_within:anymarginal = 0")
p_test_overall_C_fit = fitstat(reg_waterlevel_within, ~ f + wald)$wald$p
## <70 days ---------------------------------------------------------------
reg_waterlevel_inf70_wth = feols(waterlevel ~ treatment_within*anymarginal, fixef = c("Upazila"), cluster = ~village_id, data = rct1[dat <= 70])
p_test_inf70_C = p_value_joint_test(reg_waterlevel_inf70_wth, "treatment_within + anymarginal + treatment_within:anymarginal = 0")
p_test_inf70_C_fit = fitstat(reg_waterlevel_inf70_wth, ~ wald)$wald$p
## >70 days ---------------------------------------------------------------
reg_waterlevel_sup70_wth = feols(waterlevel ~ treatment_within*anymarginal, fixef = c("Upazila"), cluster = ~village_id, data = rct1[dat > 70])
p_test_sup70_C = p_value_joint_test(reg_waterlevel_sup70_wth, "treatment_within + anymarginal + treatment_within:anymarginal= 0")
p_test_sup70_C_fit = fitstat(reg_waterlevel_sup70_wth, ~ wald)$wald$p
## Tables Panel C ----------------------------------------------------------
p_value = data.frame(
term = "p-value (car)",
Overall_Interacted = p_test_overall_C,
Inf70_Interacted = p_test_inf70_C,
Sup70_Interacted = p_test_sup70_C
)
p_value_fit = data.frame(
term = "p-value (fixest)",
Overall_Interacted = p_test_overall_C_fit,
Inf70_Interacted = p_test_inf70_C_fit,
Sup70_Interacted = p_test_sup70_C_fit
)
add_to_table_C = rbind(p_value, p_value_fit)
table2C = modelsummary(
models = list(
"Overall" = list("(1)" = reg_waterlevel_within),
"0–70 days after \nplanting" = list("(2)" = reg_waterlevel_inf70_wth),
"70+ days after \nplanting" = list("(3)" = reg_waterlevel_sup70_wth)
),
shape = "cbind",
gof_omit = "R2|Adj\\.|Within|AIC|BIC|RMSE|Std.Errors|FE",
coef_rename = c("Treatment", "Volumetric Pricing","Treatment x Volumetric Pricing"),  # Disable automatic GOF statistics
add_rows = add_to_table_C,
output = "latex"
)
table_2C_char = as.character(table2C)
writeLines(table_2C_char, output_folder("tables2_C.tex"))
# This files replicate the findings of Ujjayant Chakravorty, Kyle Emerick, and Manzoor Dar
# For the paper "Inefficient water pricing and incentives for conservation" published in the American Economic Review in 2023
# Table 7
# Packages ----------------------------------------------------------------
library(fixest)
library(data.table)
library(modelsummary)
library(knitr)
library(dplyr)
library(lmtest)
library(sandwich)
library(car)
# Data --------------------------------------------------------------------
rct2 = fread(get_data("input_primary/rct2_baseline.csv"), select = c("farmer_id", "waterprice", "waterirrig", "waterwhopay", "nadults", "nyoung"))
rct2_usage = fread(get_data("input_primary/rct2_usage.csv"))
rct2_pipesales = fread(get_data("input_primary/rct2_pipesales.csv"), select = c("farmer_id", "adoption"))
rct2 = merge(rct2, rct2_usage, by = "farmer_id")
rct2 = merge(rct2, rct2_pipesales, by = "farmer_id")
rm(rct2_usage, rct2_pipesales)
gc()
rct2[, `:=` (logprice = log(price),
cardtreat = as.integer(treatment == "card"),
cardtreat_price = as.integer(treatment == "card") * price,
cardtreat_logprice = as.integer(treatment == "card") * log(price),
awd_use = as.integer(awdirri == 1 | awdoth == 1),
dpaba = as.integer(Upazila == "PABA"),
dtanore = as.integer(Upazila == "TANORE"))]
for (j in c("dpaba", "dtanore")) {
rct2[, paste0(j, "_d") := get(j) - mean(get(j), na.rm = TRUE)]
}
# AWD Installed -------------------------------------------------------------
# Column 1
model_awdins= feols(awdmeas ~ cardtreat + price, fixef = 'upazila', cluster = ~village_id, data = rct2)
# AWD Installed, Interaction -------------------------------------------------------------
# Column 2
model_awdins_i = feols(awdmeas ~ cardtreat + price + cardtreat_price, fixef = 'upazila', cluster = ~village_id, data = rct2)
mean_control_awdins = rct2[cardtreat == 0, mean(awdmeas, na.rm = TRUE)]
# Water Level -------------------------------------------------------------
# Column 3
rct2[, waterlevel_comp := waterlevel_c_cm]
rct2[, waterlevel_comp := ifelse(is.na(waterlevel_c_cm), waterlevel_f_cm, waterlevel_c_cm)]
model_wl= feols(waterlevel_comp ~ cardtreat + price, fixef = 'upazila', cluster = ~village_id, data = rct2)
# Water Level, Interacted -------------------------------------------------------------
# Column 3
model_wl_i= feols(waterlevel_comp ~ cardtreat + price + cardtreat_price, fixef = 'upazila', cluster = ~village_id, data = rct2)
mean_control_wl = rct2[cardtreat == 0, mean(waterlevel_comp, na.rm = TRUE)]
# AWD Purchased -----------------------------------------------------------
# Column 5
# model_ldp = feols(adoption ~ cardtreat + price + dpaba + dtanore, fixef = "upazila" ,cluster = ~village_id,data = rct2)
model_ldp = lm(adoption ~ cardtreat + price + dpaba + dtanore, ,data = rct2)
vcov_ldp <- vcovCL(model_ldp, cluster = rct2$village_id)
coeftest_ldp <- coeftest(model_ldp, vcov. = vcov_ldp)
mean_adoption_control <- rct2[cardtreat == 0, mean(adoption, na.rm = TRUE)]
coef_ldp <- coef(model_ldp)
epst_ldp <- coef_ldp["price"] * 55 / (coef_ldp["(Intercept)"] + coef_ldp["cardtreat"] + coef_ldp["price"] * 55)
epsc_ldp <- coef_ldp["price"] * 55 / (coef_ldp["(Intercept)"] + coef_ldp["price"] * 55)
# AWD Purchasing, Interaction -----------------------------------
# Column 6
model_ldp_i <- lm(adoption ~ cardtreat + price + cardtreat_price + dpaba_d + dtanore_d,data = rct2)
vcov_ldp_i <- vcovCL(model_ldp_i, cluster = rct2$village_id)
coeftest_ldp_i <- coeftest(model_ldp_i, vcov. = vcov_ldp_i)
# Create a new column "pvalue" to store test p-values
rct2[, pvalue := NA_real_]
# Loop over specific price values and test: cardtreat + i*cardtreat_price = 0
for(i in c(20, 30, 40, 50, 60, 70, 80, 90)) {
hyp_str <- paste0("cardtreat + ", i, " * cardtreat_price = 0")
lh_test <- linearHypothesis(model_ldp_i, hyp_str, vcov = vcov_ldp_i, test = "F")
p_val <- lh_test[2, "Pr(>F)"]
rct2[price == i, pvalue := p_val]
cat("Price:", i, "p-value:", p_val, "\n")
}
coef_ldp_i <- coef(model_ldp_i)
epst_ldp_i <- (coef_ldp_i["price"] + coef_ldp_i["cardtreat_price"]) * 55 /
(coef_ldp_i["(Intercept)"] + coef_ldp_i["cardtreat"] + coef_ldp_i["price"] * 55 + coef_ldp_i["cardtreat_price"] * 55)
epsc_ldp_i <- coef_ldp_i["price"] * 55 /
(coef_ldp_i["(Intercept)"] + coef_ldp_i["price"] * 55)
delta_expr_ldp_i <- "((price+cardtreat_price)*55/((Intercept)+cardtreat+price*55+cardtreat_price*55)) - (price*55/((Intercept)+price*55))"
dm_ldp_i <- deltaMethod(coef_ldp_i, delta_expr_ldp_i, vcov = vcov_ldp_i)
t_val_ldp_i <- dm_ldp_i[1, "Estimate"] / dm_ldp_i[1, "SE"]
df_ldp_i <- df.residual(model_ldp_i)
pelas_ldp_i <- 2 * (1 - pt(abs(t_val_ldp_i), df_ldp_i))
# AWD Use -----------------------------------------------------
# Column 7
model_ldu = lm(awd_use ~ cardtreat + price + dpaba_d + dtanore_d ,data = rct2)
vcov_ldu <- vcovCL(model_ldu, cluster = rct2$village_id)
coeftest_ldu <- coeftest(model_ldu, vcov. = vcov_ldu)
mean_awd_use_control <- rct2[cardtreat == 0, mean(awd_use, na.rm = TRUE)]
coef_ldu <- coef(model_ldu)
epst_ldu <- coef_ldu["price"] * 55 / (coef_ldu["(Intercept)"] + coef_ldu["cardtreat"] + coef_ldu["price"] * 55)
epsc_ldu <- coef_ldu["price"] * 55 / (coef_ldu["(Intercept)"] + coef_ldu["price"] * 55)
# AWD Use Interaction ----------------------------------------
# Column 8
model_ldu_i = lm(awd_use ~ cardtreat + price + cardtreat_price + dpaba_d + dtanore_d, data = rct2)
vcov_ldu_i <- vcovCL(model_ldu_i, cluster = rct2$village_id)
coeftest_ldu_i <- coeftest(model_ldu_i, vcov. = vcov_ldu_i)
# Create a new column "pvalue_u" for usage p-values
rct2[, pvalue_u := NA_real_]
for(i in c(20, 30, 40, 50, 60, 70, 80, 90)) {
hyp_str <- paste0("cardtreat + ", i, " * cardtreat_price = 0")
lh_test <- linearHypothesis(model_ldu_i, hyp_str, vcov = vcov_ldu_i, test = "F")
p_val <- lh_test[2, "Pr(>F)"]
rct2[price == i, pvalue_u := p_val]
cat("Price:", i, "p-value (usage):", p_val, "\n")
}
coef_ldu_i <- coef(model_ldu_i)
epst_ldu_i <- (coef_ldu_i["price"] + coef_ldu_i["cardtreat_price"]) * 55 /
(coef_ldu_i["(Intercept)"] + coef_ldu_i["cardtreat"] + coef_ldu_i["price"] * 55 + coef_ldu_i["cardtreat_price"] * 55)
epsc_ldu_i <- coef_ldu_i["price"] * 55 /
(coef_ldu_i["(Intercept)"] + coef_ldu_i["price"] * 55)
delta_expr_ldu_i <- "((price+cardtreat_price)*55/((Intercept)+cardtreat+price*55+cardtreat_price*55)) - (price*55/((Intercept)+price*55))"
dm_ldu_i <- deltaMethod(coef_ldu_i, delta_expr_ldu_i, vcov = vcov_ldu_i)
dm_ldu_i
t_val_ldu_i
t_val_ldu_i <- dm_ldu_i[1, "Estimate"] / dm_ldu_i[1, "SE"]
t_val_ldu_i
df_ldu_i <- df.residual(model_ldu_i)
df_ldu_i
pelas_ldu_i <- 2 * (1 - pt(abs(t_val_ldu_i), df_ldu_i))
pelas_ldu_i
?pt
